/*
COMPRESSED STORAGE
*/

#include <iostream>
#include <vector>
#include <random>
#include <new>
#include <typeinfo>

double randNum() {/* initialize random seed: */
	std::random_device rd;  //Will be used to obtain a seed for the random number engine
	std::mt19937 gen(rd()); //Standard mersenne_twister_engine seeded with rd()
	std::uniform_real_distribution<> dis(0, 9);
//Use dis to transform the random unsigned int generated by gen into a double in [0,1]
//Each call to dis(gen) generates a new random double
	auto randx = dis(gen);        //get random x0
//      std::cout << "Random X " << randx << std::endl;
	return randx;
}

void print_ip_mat (auto rows, auto cols, auto msg, const auto mat){
	std::cout << msg << std::endl;
	int cnt = 0;
	for (int i = 0; i != rows*cols; ++i){
		std::cout << mat[i] << "\t";
		cnt++;
		if(cnt == rows){					//row major: change to cols if col-major
			std::cout << std::endl;
			cnt = 0;
		}
	}
}

void printVec (const std::vector<auto> vec) {
	for (int i = 0; i < vec.size(); i++){
		std::cout << vec[i] << std::endl;
	}
}

void random_denseMat(const auto rows, const auto cols, auto &mat_A){
	for (int i = 0; i != rows; ++i) {
		for (int j = 0; j != cols; ++j) {
			auto tmpA = rand()%10;
			mat_A[i*cols + j] = tmpA;			//row-major
		}
	}

}

void diagonalMatrix(const auto rows, const auto cols, auto &mat_A){
	for (int i = 0; i != rows; ++i) {
		for (int j = 0; j != cols; ++j) {
			if(i==j){
				auto tmpA = randNum();
				mat_A[i*cols + j] = tmpA;			//row-major
			}
			else
				mat_A[i*cols + j] = 0;
		}
	}

}

void csr(const auto rows, const auto cols, auto sparse_matrix) {						//pass in vector
	std::vector <double> val;
	std::vector <int> col_ind, row_ptr, row_ind;
	//std::vector <std::vector<double>> key_val_pair;
	int cnt = 0;
	bool new_row = false;
	for(int i = 0, ii=0; i != rows; ++i){
		for(int j = 0; j != cols; ++j, ++ii){
			if (j==0) 
				new_row = true;
			if(sparse_matrix[ii] != 0){
				val.push_back(sparse_matrix[ii]);
				row_ind.push_back(i);
				col_ind.push_back(j);
			
				if (new_row == true) {
					row_ptr.push_back(cnt);
					new_row = false;
				}
				cnt++;
			}
		}
	}
	/*
	key_val_pair.push_back(val);
	key_val_pair.push_back(row_ind);
	key_val_pair.push_back(col_ind);
	for (int i = 0; i < key_val_pair.size(); i++) {
		for (int j = 0; j < key_val_pair[1].size(); j++) {
			std::cout << key_val_pair[i][j] << std::endl;
		}
	}
	*/

	//location in val vector where new row starts
	/*int row_elem = val.size();
	for(int i = 0; i < row_ind.size(); i++){
		for(int j = 0; j < col_ind.size(); j++){
			row_ptr.push_back(val[i*row_elem + j]);			//FIX : logic for row_ptr
		}
	}
	*/
	

	/*std::cout << "val" << std::endl;
	printVec(val);
	std::cout << "column index" << std::endl;
	printVec(col_ind);
	std::cout << "row index" << std::endl;
	printVec(row_ind);
	*/std::cout << "row ptr" << std::endl;
	printVec(row_ptr);
	
}

int main (int argc, char *argv[]) {
	int m = atoi(argv[1]);
	int n = atoi(argv[1]);

	double *denseA;										//dynamic array
	denseA = new double[m*n];
	random_denseMat(m, n, denseA);
	std::string msg_dense_mat = "dense matrix A";
	//print_ip_mat(m, n, msg_dense_mat, denseA);
	
	std::vector<double> diagA (m*n);					//vector; which is faster?
	std::string msg_diag_mat = "diagonal matrix A";
	diagonalMatrix(m, n, diagA);
	//print_ip_mat(m, n, msg_diag_mat, diagA);

	int length = m*n;
	std::vector<double> sp(length);
	double array [length];
	/*
	Generate random sparse matrix
	*/
	int t = 6;											//target nnz elements
	for (int i = 0; i < t; ++i) {
		int index = (int) (length * (int) randNum());
		array[index] = i % 2 ? -1 : 1;
	}
	//print_ip_mat (m, n, "sparse_matrix", array);
	//end sparse

	double sparse [16] = {1, 2, 0, 0, 0, 0, 0, 0, 2, 3, 4, 0, 3, 0, 5, 16};
	print_ip_mat(m, n, "sparse matrix manual", sparse);
	csr(m, n, sparse);											//matrix stored in row major


	delete [] denseA;
	return 0;
}